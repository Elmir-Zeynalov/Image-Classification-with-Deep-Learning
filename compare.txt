
 model.fc = NN_models(model, 1)
    model = model.to(device)  # Move the model to GPU or CPU

    criterion = torch.nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9, weight_decay=0.001)


Training Losses
[0.81073114 0.5514261  0.5109024  0.4774813  0.45580167 0.4400048
 0.42716933 0.41922825 0.40976159 0.39460408 0.38547963 0.37236919
 0.36544252 0.36937162 0.36246154 0.35054223 0.34995291 0.35920785
 0.3455294  0.33171114 0.34008294 0.32536548 0.34114043 0.32803687
 0.33215115 0.32110039 0.32148086 0.31589491 0.31915971 0.30254711]
------------

Validation Losses
[0.28888989 0.25119405 0.2658949  0.25181814 0.22180251 0.22638867
 0.21785888 0.26415442 0.24524535 0.24651579 0.22129728 0.23288102
 0.22721365 0.22927102 0.22460748 0.23723501 0.2628915  0.21772221
 0.22149544 0.22890944 0.23198126 0.24166997 0.23280048 0.23063186
 0.21935326 0.23640087 0.23586745 0.23773396 0.25497632 0.23272543]
------------

Accuracies
Average over all epochs: 92.1%

mAps
[0.8309378064130621, 0.8518551763002512, 0.8486740098754811, 0.8382388738212408, 0.8664596787877917, 0.8614142139951695, 0.8732992884053626, 0.8478503201824159, 0.8514386068308811, 0.8576016292870783, 0.8826904429432226, 0.8720886411638444, 0.8671084614884244, 0.8685622397102416, 0.8665091266448065, 0.8767477386883437, 0.8515871903531099, 0.86734067493081, 0.875546853477336, 0.8608681884380843, 0.8643423917576339, 0.8669140327175825, 0.8714756140173261, 0.8708180241186061, 0.877938033656637, 0.8747431307717992, 0.8671821361240742, 0.8634394852763214, 0.8709811007683146, 0.8734732694029156]
mAP over all epochs: 86.4%

Training done...
loading: /itf-fi-ml/home/elmirz/IN3310/Mandatory_1/SavedModels/model_checkpoint_epoch_29.pth
Model load successful!
Analyzing feature maps!
tensor([0, 1, 1, 1, 5, 0, 0, 4, 0, 4, 3, 1, 0, 2, 0, 3], device='cuda:0')
tensor([0, 1, 1, 1, 5, 0, 0, 4, 0, 4, 3, 1, 0, 2, 0, 3], device='cuda:0')

tensor([3, 5, 4, 3, 4, 4, 4, 5, 5, 2, 4, 0, 4, 1, 0, 4], device='cuda:0')
tensor([3, 5, 4, 3, 4, 4, 4, 2, 5, 2, 4, 0, 4, 1, 0, 4], device='cuda:0')

tensor([4, 2, 0, 5, 4, 0, 1, 2, 5, 3, 3, 4, 2, 4, 2, 2], device='cuda:0')
tensor([4, 2, 0, 5, 4, 0, 0, 2, 5, 3, 3, 4, 2, 4, 2, 2], device='cuda:0')

tensor([4, 3, 3, 0, 5, 2, 4, 0, 1, 5, 3, 3, 1, 1, 4, 3], device='cuda:0')
tensor([4, 3, 3, 0, 5, 2, 4, 0, 0, 5, 3, 3, 1, 1, 4, 3], device='cuda:0')

tensor([3, 3, 3, 3, 5, 1, 2, 5, 5, 1, 2, 4, 1, 3, 3, 2], device='cuda:0')
tensor([3, 3, 3, 3, 5, 1, 2, 5, 5, 1, 2, 1, 0, 3, 3, 2], device='cuda:0')

tensor([4, 4, 4, 3, 5, 1, 1, 2, 2, 5, 5, 2, 1, 5, 4, 1], device='cuda:0')
tensor([4, 4, 4, 3, 5, 1, 1, 2, 2, 5, 2, 2, 1, 5, 4, 1], device='cuda:0')

tensor([5, 4, 0, 5, 0, 0, 0, 3, 1, 1, 0, 2, 1, 2, 0, 0], device='cuda:0')
tensor([5, 4, 0, 5, 0, 1, 0, 3, 1, 0, 0, 2, 1, 2, 0, 0], device='cuda:0')

tensor([0, 3, 2, 5, 0, 2, 0, 4, 3, 3, 1, 1, 4, 3, 4, 1], device='cuda:0')
tensor([0, 3, 2, 5, 0, 2, 0, 4, 3, 3, 1, 1, 4, 3, 4, 1], device='cuda:0')

tensor([5, 5, 0, 5, 2, 2, 0, 5, 1, 5, 0, 0, 4, 3, 2, 3], device='cuda:0')
tensor([5, 5, 1, 5, 2, 2, 0, 5, 1, 5, 0, 0, 4, 3, 2, 3], device='cuda:0')

tensor([5, 0, 1, 2, 3, 0, 2, 1, 0, 1, 3, 3, 3, 1, 4, 2], device='cuda:0')
tensor([5, 0, 1, 2, 3, 3, 2, 3, 0, 1, 3, 3, 3, 3, 4, 2], device='cuda:0')

tensor([1, 5, 1, 4, 3, 5, 2, 1, 4, 0, 0, 1, 5, 0, 4, 5], device='cuda:0')
tensor([1, 5, 0, 4, 3, 5, 2, 1, 4, 0, 0, 1, 5, 0, 4, 5], device='cuda:0')

tensor([1, 4, 4, 1, 2, 1, 5, 0, 0, 2, 5, 2, 0, 0, 4, 5], device='cuda:0')
tensor([1, 4, 4, 1, 2, 1, 5, 0, 0, 2, 5, 2, 0, 0, 2, 5], device='cuda:0')

tensor([1, 3, 0, 5, 4, 5, 0, 1, 1, 1, 2, 0, 5, 1, 1, 1], device='cuda:0')
tensor([1, 3, 0, 5, 4, 5, 0, 1, 1, 1, 2, 0, 5, 1, 1, 1], device='cuda:0')

Average Percentage of Non-Positive Values: 51.13%



-------------------------------------------------------------------------------------------------------------------------------------

    model.fc = NN_models(model, 3)
    model = model.to(device)  # Move the model to GPU or CPU

    criterion = torch.nn.CrossEntropyLoss()
    #lr=0.00001
    optimizer = torch.optim.SGD(model.parameters(), lr=0.0001, momentum=0.9, weight_decay=0.001)


    Training Losses
[1.76331848 1.61143129 1.22804564 0.9794917  0.85473571 0.74426611
 0.68018229 0.65043605 0.60098619 0.5816636  0.55261075 0.52657699
 0.52158966 0.50678168 0.49692279 0.48736752 0.48843197 0.48301548
 0.46067106 0.45514478 0.44793849 0.44237916 0.4403751  0.42584349
 0.42495646 0.41621705 0.41104851 0.41005867 0.40871045 0.39519921]
------------

Validation Losses
[1.69665903 1.33112853 0.82825816 0.63837177 0.46481119 0.38096516
 0.31891113 0.29714071 0.26940319 0.26845987 0.25714887 0.25480173
 0.2600807  0.24761279 0.24343335 0.23714744 0.23013401 0.23461607
 0.24247999 0.23504076 0.22874978 0.22475344 0.22442513 0.22784269
 0.22045802 0.22181501 0.23808803 0.22666035 0.22585962 0.22235146]
------------

Accuracies
Average over all epochs: 87.7%

mAps
[0.37805170294886126, 0.5519938984075959, 0.6439689132230922, 0.7169416400476752, 0.749792385458512, 0.7556904789418958, 0.8099206801938226, 0.8215825778782065, 0.8308121405338545, 0.8299131010135947, 0.8391216348994647, 0.8433799087474556, 0.8413181469753176, 0.8515778144177891, 0.8466785447455113, 0.8473483600360603, 0.8527141950301921, 0.8527971796194973, 0.852493578073508, 0.8412907417518326, 0.8573417674271142, 0.8612399473787647, 0.8583952575371693, 0.8583370443976021, 0.8636362148324385, 0.8592464879590983, 0.8532246847669412, 0.8538686919886311, 0.8591826361837841, 0.8563685593337399]
mAP over all epochs: 80.5%
Training done...
loading: /itf-fi-ml/home/elmirz/IN3310/Mandatory_1/SavedModels/model_checkpoint_epoch_29.pth
Model load successful!
Analyzing feature maps!
tensor([1, 0, 0, 0, 5, 1, 1, 3, 1, 3, 2, 0, 1, 4, 1, 2], device='cuda:0')
tensor([1, 0, 0, 0, 5, 1, 1, 3, 1, 3, 2, 0, 1, 4, 3, 2], device='cuda:0')

tensor([2, 5, 3, 2, 3, 3, 3, 5, 5, 4, 3, 1, 3, 0, 1, 3], device='cuda:0')
tensor([2, 5, 3, 2, 3, 3, 3, 5, 5, 4, 3, 1, 3, 0, 1, 3], device='cuda:0')

tensor([3, 4, 1, 5, 3, 1, 0, 4, 5, 2, 2, 3, 4, 3, 4, 4], device='cuda:0')
tensor([3, 4, 1, 5, 3, 1, 1, 4, 5, 2, 2, 3, 4, 3, 4, 4], device='cuda:0')

tensor([3, 2, 2, 1, 5, 4, 3, 1, 0, 5, 2, 2, 0, 0, 3, 2], device='cuda:0')
tensor([3, 2, 2, 1, 5, 4, 3, 0, 2, 5, 2, 2, 0, 0, 3, 2], device='cuda:0')

tensor([2, 2, 2, 2, 5, 0, 4, 5, 5, 0, 4, 3, 0, 2, 2, 4], device='cuda:0')
tensor([2, 2, 2, 2, 5, 0, 4, 5, 5, 1, 4, 0, 0, 2, 2, 5], device='cuda:0')

tensor([3, 3, 3, 2, 5, 0, 0, 4, 4, 5, 5, 4, 0, 5, 3, 0], device='cuda:0')
tensor([3, 3, 3, 2, 5, 4, 0, 4, 4, 5, 5, 4, 0, 5, 3, 0], device='cuda:0')

tensor([5, 3, 1, 5, 1, 1, 1, 2, 0, 0, 1, 4, 0, 4, 1, 1], device='cuda:0')
tensor([5, 3, 1, 5, 1, 0, 1, 2, 0, 1, 1, 4, 0, 4, 1, 1], device='cuda:0')

tensor([1, 2, 4, 5, 1, 4, 1, 3, 2, 2, 0, 0, 3, 2, 3, 0], device='cuda:0')
tensor([1, 2, 4, 5, 1, 4, 1, 3, 2, 2, 0, 0, 3, 2, 3, 0], device='cuda:0')

tensor([5, 5, 1, 5, 4, 4, 1, 5, 0, 5, 1, 1, 3, 2, 4, 2], device='cuda:0')
tensor([5, 5, 0, 5, 4, 4, 1, 5, 0, 5, 1, 1, 3, 2, 4, 2], device='cuda:0')

tensor([5, 1, 0, 4, 2, 1, 4, 0, 1, 0, 2, 2, 2, 0, 3, 4], device='cuda:0')
tensor([5, 2, 0, 4, 2, 0, 4, 0, 1, 0, 2, 2, 2, 2, 3, 4], device='cuda:0')

tensor([0, 5, 0, 3, 2, 5, 4, 0, 3, 1, 1, 0, 5, 1, 3, 5], device='cuda:0')
tensor([0, 5, 1, 3, 2, 5, 4, 1, 3, 1, 1, 0, 5, 1, 3, 5], device='cuda:0')

tensor([0, 3, 3, 0, 4, 0, 5, 1, 1, 4, 5, 4, 1, 1, 3, 5], device='cuda:0')
tensor([0, 3, 3, 0, 4, 0, 5, 1, 1, 4, 5, 4, 1, 1, 2, 5], device='cuda:0')

tensor([0, 2, 1, 5, 3, 5, 1, 0, 0, 0, 4, 1, 5, 0, 0, 0], device='cuda:0')
tensor([0, 2, 1, 5, 3, 5, 0, 0, 0, 0, 4, 1, 5, 0, 0, 0], device='cuda:0')

Average Percentage of Non-Positive Values: 51.37%


---------------------------------------------------------------------------------------------------------------------------------------